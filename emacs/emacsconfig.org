#+TITLE: Riser Emacs Configuration
#+AUTHOR: Serhii Riznychuk
#+EMAIL: sergii.riznychuk@gmail.com
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
#+STARTUP: overview

* Main Emacs Configuration
Configuration of this block contains only non-package configuration, or only package system configuration
** always Split new buffer vertical  
   #+begin_src emacs-lisp
     (setq split-width-threshold 0)
     (setq split-height-threshold nil)
	  ;; (setq split-height-threshold nil
	  ;;       split-width-threshold 160)
   #+end_src

** Emacs bars
   Show or hide emacs UΙ component. 
   ~scroll-bar-mode~ - frame scroll bar
   ~tool-bar-mode~ - stricted emacs editiing functionality(clip/paste etc..)
   ~menu-bar-mode~ - frame utility (file,view...)
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (tool-bar-mode   -1)
     (menu-bar-mode   -1)
     ;; (set-fringe-mode 0)
   #+end_src

** Modebar
   Enable line numbers in mode bars
   #+begin_src emacs-lisp
     (setq column-number-mode t)
   #+end_src

** Behavior
   Disable backup file generation
   #+begin_src emacs-lisp
     (setq custom-safe-themes t)
     (setq make-backup-files nil)
     (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
     (global-unset-key (kbd "C-z"))
   #+end_src
   X window clipboard buffer.
   #+begin_src emacs-lisp
     (delete-selection-mode t)
     (transient-mark-mode t)
     (setq x-select-enable-clipboard t)
   #+end_src

** Text enhanches
   Display empty line
   #+begin_src emacs-lisp
     (setq-default indicate-empty-lines t)
     (when (not indicate-empty-lines)
	(toggle-indicate-empty-lines))
   #+end_src
   
** Moving
   #+begin_src emacs-lisp
     (defun other-window-back ()
       (interactive)
       (other-window -1))
   #+end_src
** Autocomplete
   #+begin_src emacs-lisp
     (use-package auto-complete
       :config
       (ac-config-default)
       (setq ac-sources (append ac-sources '(ac-source-yasnippet))))
   #+end_src

** Text manipulation
   In this block you can locate functions which help me editing text or other things
*** Text moving up/down
    #+begin_src emacs-lisp
      (defun move-text-internal (arg)
	(cond
	 ((and mark-active transient-mark-mode)
	  (if (> (point) (mark))
	      (exchange-point-and-mark))
	  (let ((column (current-column))
		(text (delete-and-extract-region (point) (mark))))
	    (forward-line arg)
	    (move-to-column column t)
	    (set-mark (point))
	    (insert text)
	    (exchange-point-and-mark)
	    (setq deactivate-mark nil)))
	 (t
	  (beginning-of-line)
	  (when (or (> arg 0) (not (bobp)))
	    (forward-line)
	    (when (or (< arg 0) (not (eobp)))
	      (transpose-lines arg))
	    (forward-line -1)))))
      (defun move-text-down (arg)
	"Move region (transient-mark-mode active) or current line
	arg lines down."
	(interactive "*p")
	(move-text-internal arg))
      (defun move-text-up (arg)
	"Move region (transient-mark-mode active) or current line
	arg lines up."
	(interactive "*p")
	(move-text-internal (- arg)))
      (global-set-key (kbd "M-S-<up>") 'move-text-up)
      (global-set-key (kbd "M-S-<down>") 'move-text-down)
    #+end_src
    
** Small tips function

   #+begin_src emacs-lisp
     (defun my/copy-buffer-file-name ()
       "Show the full path to the current file in the minibuffer."
       (interactive)
       (let ((file-name (buffer-file-name)))
	 (if file-name
	     (progn
	       (message file-name)
	       (kill-new file-name))
	   (error "Buffer not visiting a file"))))
   #+end_src

** Artist mode
   #+begin_src emacs-lisp
     (add-hook 'artist-mode-hook (lambda () (setq indent-tabs-mode nil)))
   #+end_src

** Font changing

#+begin_src emacs-lisp 
  (defun riser/set-my-custom-font (&rest args)
    "Set 'default face font. 
   :family - String font name 
   :height - (default 110) String font size
   :wieght - (default 'normal) Symbol can be 'bold | 'normal | 'italic
   :width - (default 'normal) Symbol.

  Example
   (riser/set-my-custom-font
    :family \"Source Code Pro\"
    :height 

  See also
    https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html
    "
    (let ((family (plist-get args :family))
	  (height (plist-get args :height))
	  (f-weight (plist-get args :weight))
	  (f-width (plist-get args :width)))
      (unless family (error "riser/set-my-custom-font. Argument `:family' hasn't been setted"))
      (unless height (setq height 110))
      (unless f-weight (setq f-weight 'normal))
      (unless f-width (setq f-width 'normal))
      (set-face-attribute 'default nil
			  :family family
			  :height height
			  :weight f-weight
			  :width f-width)))


  (defun customize-font-SourceCodePro ()
    (interactive)
    (riser/set-my-custom-font
     :family "Source Code Pro"))

  (defun customize-font-JetBrains ()
    (interactive)
    (riser/set-my-custom-font
     :family "JetBrains Mono"))

  (defun customize-font-Victor ()
    (interactive)
    (riser/set-my-custom-font
     :family "Victor Mono"))

  (defun customize-font-Hack ()
    (interactive)
    (riser/set-my-custom-font
     :family "Hack"))

  (defun customize-font-Monospace ()
    (interactive)
    (riser/set-my-custom-font
     :family "Monospace"))

  (defun customize-font-IBMPlexMono ()
    (interactive)
    (riser/set-my-custom-font
     :family "IBM Plex Mono"))

  (defun customize-font-FiraCode ()
    (interactive)
    (riser/set-my-custom-font
     :family "Fira Code"))
#+end_src

** Theme changing
   #+begin_src emacs-lisp
     ;; (defun toggle-theme (theme)
     ;;   (if (eq (car custom-enabled-themes) theme)
     ;;       (disable-theme theme)
     ;;     ;; (enable-theme theme)
     ;;     (load-theme theme)))

     (defun toggle-theme (theme)
       (progn
	 (mapcar (lambda (thm) (disable-theme thm)) custom-enabled-themes)
	 (load-theme theme)))

     (defun customize-dracula () (interactive) (toggle-theme 'dracula))
     (defun customize-chyla () (interactive) (toggle-theme 'chyla))
     (defun customize-freshcode-light () (interactive) (toggle-theme 'freshcode-light))
     (defun customize-ritchie () (interactive) (toggle-theme 'ritchie))

     (defun customize-frame-opacity ()
       (interactive)
       (let* ((choices '(("50"  . 50)
			 ("0"  . 0)
			 ("10"  . 10)
			 ("20"  . 20)
			 ("30"  . 30)
			 ("40"  . 40)
			 ("60"  . 60)
			 ("70"  . 70)
			 ("100" . 100)
			 ("90"  . 90)))
	      (choice
	       (alist-get
		(completing-read "Choose: " choices)
		choices nil nil 'equal)))
	 (if choice
	     (set-frame-parameter nil 'alpha-background choice)
	   (message "Wrong choice"))))

   #+end_src

** hightlight something
   #+begin_src emacs-lisp
     (defun riser/rainbow-x-color-luminance (color)
       "Calculate the relative luminance of a color string (e.g. \"#ffaa00\", \"blue\").
     Return a value between 0 and 1."
       (let* ((values (x-color-values color))
	      (r (/ (car values) 256.0))
	      (g (/ (cadr values) 256.0))
	      (b (/ (caddr values) 256.0)))
	 (rainbow-color-luminance r g b)))

     (defun highlight-something (begin end)
       (interactive "r")
       (let ((color (string-trim (helm-colors))))
	 (message "Highlight from %d to %d with color %s" begin end color)
	 (put-text-property
	  begin end
	  'face `((:foreground ,(if (> 0.5 (riser/rainbow-x-color-luminance color))
				    "white" "black"))
		  (:background ,color)))))
   #+end_src

** Large UI
#+begin_src emacs-lisp
  (defun riser/make-large-ui (num)
    (interactive "nChoose font size 100-150: ")
    (if (numberp num)
     (let ((size (if (< 99 num 151) num 100)))
       (set-face-attribute 'default nil :height num))
     (message "wrong argument %s" num)))
#+end_src

** NixOS
#+begin_src emacs-lisp
  (use-package helm-nixos-options
    :ensure t)

  (use-package nix-mode
    :ensure t
    :after (helm-nixos-options)
    :bind (("C-c p" . helm-nixos-options)))

#+end_src

* Modeline 
  #+begin_src emacs-lisp
    (use-package mood-line
      :ensure t
      :init
      (mood-line-mode))
  #+end_src

* Magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :defer 3
      :bind (("C-x g" . magit-status)))
  #+end_src

* Neotree

    #+begin_src emacs-lisp
      (defun neotree-toggle-or-open-file-dir ()
	(interactive) 
	(if (neo-global--window-exists-p) 
	    (neotree-hide) 
	  ((neo-open-dir (buffer-file-name)))))

      (use-package neotree 
	:ensure t
	:defer 3
	:bind (("<f8>" . neotree-toggle)
	       ;; ("<f9>" . neotree-toggle-or-open-file-dir)
	       ;; ("C-c t" . neotree-toggle)
	       ))

    #+end_src

* Treemacs

  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :config
      (progn
	(setq treemacs-width 50)
    
	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)
    
	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode 'always))
      :bind
      (:map global-map
	    ("<f9>"   . treemacs)
	    ("<f10>"   . treemacs-bookmark)))
  #+end_src

* Projectile+Helm

  #+begin_src emacs-lisp 
    (use-package helm 
      :ensure t
      :demand t
      :bind (("M-x" . helm-M-x)
	     ;; ("C-i" . helm-M-x)
	     ;; ("C-x C-f" . helm-find-files)
	     ("C-x C-f" . helm-find-files)
	     ("C-." . helm-imenu-in-all-buffers)
	     ;; ("C-x C-f" . ido-find-file)
	     ;; ("<tab>" . helm-execute-persistent-action)
	     ;; ("TAB" . helm-execute-persistent-action)
	     ;; ("C-z" . helm-select-action)
	     ("C-x b" . helm-buffers-list)
	     ;; ("C-x c o" . helm-occur) ;
	     ;; ("M-y" . helm-show-kill-ring) ;
	     ("C-x r b" . helm-filtered-bookmarks)
	     )
      :config
      (helm-mode 1))

    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
		  ;; ("s-p" . projectile-command-map)
		  ("C-c p" . projectile-command-map)))

    (use-package helm-projectile
      :ensure t
      :after (helm projectile)
      :init
      (helm-projectile-on))

    (use-package helm-ag
      :ensure t
      :after (helm projectile)
      :bind (("C-M-s" . helm-do-ag-this-file))
      :custom
      (helm-ag-base-command "ag --hidden --nocolor --nogroup --ignore-case"))
  #+end_src

* IDO
  #+begin_src emacs-lisp
    (use-package ido
      :config
      (setq ido-enable-flex-matching t
	    ido-use-virtual-buffers t)
      (ido-mode t))
  #+end_src
  
* yasnippets
  #+begin_src emacs-lisp
    ;; (require 'yasnippet)

    ;; (setq yas-snippet-dirs
    ;;       '("~/.emacs.d/snippets"
    ;; 	"~/fcode/projects/qbp1/backend2/serhii/snippets"))

    ;; (defun ac-common-setup ()
    ;; (setq ac-sources (append ac-sources '(ac-source-yasnippet))))

    (use-package yasnippet
      :ensure t
      :bind (("C-z i" . yas-insert-snippet))
      :config
      (setq yas-snippet-dirs
	    '("~/.emacs.d/snippets"
	      "~/fcode/projects/qbp1/backend2/serhii/snippets"))
      (yas-global-mode 1))
  #+end_src
* Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+end_src
* Lisps languages
  #+begin_src emacs-lisp

    (use-package highlight-parentheses
      :ensure t)

    (defun lisp-mode-hook ()
      "enable some plugins after init mode"
      (paredit-mode)
      (prettify-symbols-mode)
      ;; (rainbow-delimiters-mode)
      (highlight-parentheses-mode))
  #+end_src
** Emacs lisp
*** Emacs mode   
   #+begin_src emacs-lisp
     (use-package elisp-mode
	:defer t
	:config (add-hook 'emacs-lisp-mode-hook 'lisp-mode-hook))
   #+end_src
*** Dash library 
    #+begin_src emacs-lisp
      (use-package dash
	:no-require t
	:after dash
	:config
	(dash-enable-font-lock))
    #+end_src
** Main lisp Mode
   #+begin_src emacs-lisp
   (use-package lisp-mode
      :defer t
      :config (add-hook 'lisp-mode-hook 'lisp-mode-hook))  
   #+end_src
** Clojure
   #+begin_src emacs-lisp
     (use-package flycheck-clj-kondo
       :ensure t)

     (defun clojure-lisp-pretty-symbols ()
       "Make some word or string show as pretty Unicode symbols"
       (setq prettify-symbols-alist '(;; ("lambda" . ?λ)
				      ("fn" . ?λ)
				      ("fe" . ?η)
				      ;; Ƒ Ɣ ƒ Ƭ Ʃ Ƴ ƴ ɀ ℎ ℰ ℱ Ⅎ ℳ ℓ ⊂ ⊃ ⋂ ⋃ ∩ ∪ ∈ ∊ ∋ ∍ ∘ ⇩ ⇘ ⯆ ⯅ 🭶 ⯇ ⯈
				      ;; Greek alphabet 
				      ;; Α α, Β β, Γ γ, Δ δ, Ε ε, Ζ ζ, Η η, Θ θ, Ι ι, Κ κ, Λ λ, Μ μ, Ν ν, 
				      ;; Ξ ξ, Ο ο, Π π, Ρ ρ, Σ σ/ς, Τ τ, Υ υ, Φ φ, Χ χ, Ψ ψ, Ω ω
				      ;; ("->" . ?→)
				      ;; ("->>" . ?↠)
				      ;; ("=>" . ?⇒)
				      ("defmulti" . ?Ƒ)
				      ("defmethod" . ?ƒ)
				      ("/=" . ?≠)   ("!=" . ?≠)
				      ("==" . ?≡)   ("not" . ?!)
				      ("<=" . ?≤)   (">=" . ?≥)
				      ("comp" . ?υ) ("partial" . ?ρ)
				      ("and" . ?∧)  ("&&" . ?∧)
				      ("or" . ?∨)   ("||" . ?∨))))
     (defun personal-clojure-mode-hook ()
       (set-window-margins (selected-window) 2 2)
       (clojure-lisp-pretty-symbols)
       (add-to-list 'flycheck-checkers 'clj-kondo-clj)
       (add-to-list 'flycheck-disabled-checkers 'clojure-cider-eastwood)
       ;; (flycheck-mode t)
       (lisp-mode-hook))

     (use-package clojure-mode
       :defer t
       :config
       (require 'flycheck-clj-kondo)
       (add-hook 'clojure-mode-hook 'personal-clojure-mode-hook))
   #+end_src

   #+begin_src ;;
     (defvar LSP-COMMAND-PREFIX "C-j")
     (use-package lsp-ui
       :ensure t)
     (use-package lsp-mode
       :ensure t
       :bind ("<tab>" . company-indent-or-complete-common)
       :hook ((clojure-mode . lsp)
	      (clojurec-mode . lsp)
	      (clojurescript-mode . lsp)
	      (lsp-mode . (lambda ()
			    (let ((lsp-keymap-prefix LSP-COMMAND-PREFIX))
			      (lsp-enable-which-key-integration)
			      (auto-complete-mode -1)))))
       :config
       (define-key lsp-mode-map (kbd LSP-COMMAND-PREFIX) lsp-command-map)
       (setq lsp-headerline-breadcrumb-enable nil)
       (dolist (m '(clojure-mode
		    clojurec-mode
		    clojurescript-mode
		    clojurex-mode))
	 (add-to-list 'lsp-language-id-configuration `(,m . "clojure"))))
   #+end_src
** Common lisp
   #+begin_src emacs-lisp
     (add-to-list 'exec-path "C:\\Program Files\\Steel Bank Common Lisp\\2.0.0\\") ;; or wherever you installed SBCL or other Lisp
     ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
     (setq inferior-lisp-program "sbcl") ;; or other Lisp
   #+end_src

* Recentf
  recentf package keep paths of your last edited files
  #+begin_src emacs-lisp
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
      (message "Aborting")))
  
  (use-package recentf
     :bind (("C-c C-b" . recentf-open-files)
            ("C-c C-r" . ido-recentf-open))
     :config (setq recentf-max-menu-items 30
                   recentf-max-saved-items 50)
     (recentf-mode 1))
  #+end_src

* Org mode
** Bullet mode
   Bullet replace header Symbol's on other markup specified in variable ~org-bullets-bullet-list~
   #+begin_src emacs-lisp
     (use-package org-bullets
	:commands org-mode
	:after org
	:config
	;; (setq org-bullets-bullet-list '("α" "β" "γ" "δ" "ε" "ζ" "η" "λ"))
	;; (setq org-bullets-bullet-list '("●" "◉" "○" "◆" "◇"))
	;; (setq org-bullets-bullet-list '("◆"))
	(setq org-bullets-bullet-list '("●"))
	;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
	(org-bullets-mode))
   #+end_src
** LaTeX conf
   #+begin_src emacs-lisp
     ;; (require 'ox-latex)
     (setq org-latex-listings t)
     (add-to-list 'org-latex-packages-alist '("" "listings"))
     (add-to-list 'org-latex-packages-alist '("" "color"))
     ;; (add-to-list 'org-latex-packages-alist '("" "minted"))

     ;; (setq org-latex-listings 'minted
     ;;       org-latex-pdf-process
     ;;       (mapcar (lambda (s) (replace-regexp-in-string "%latex " "%latex --shell-escape " s)) org-latex-pdf-process))

     ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
   #+end_src
   
** Main configuration
   #+begin_src emacs-lisp
     (defun org-mode-pretty-symbols ()
       "Make some word or string show as pretty Unicode symbols"
       (setq prettify-symbols-alist '(;; ("lambda" . ?λ)
				      ;; ("fn" . ?λ)
				      ;; Ƒ Ɣ ƒ Ƭ Ʃ Ƴ ƴ ɀ ℎ ℰ ℱ Ⅎ ℳ ℓ ⊂ ⊃ ⋂ ⋃ ∩ ∪ ∈ ∊ ∋ ∍ ∘ ⇩ ⇘ ⯆ ⯅ 🭶 ⯇ ⯈
				      ;; ("->" . ?→)
				      ;; ("->>" . ?↠)
				      ;; ("=>" . ?⇒)
				      ("#+begin_export" ?⯈)
				      ("#+end_export" ?⯅)
				      ("#+begin_example" ?⯆)
				      ("#+end_example" ?⯅)
				      ("#+begin_src" ?⯈)
				      ("#+end_src" ?⯅)
				      ("#+RESULTS:" ?=))))

     (use-package org
       :bind (("C-c l" . org-store-link)
	      ("C-c a" . org-agenda))
       :init (progn
	       (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((shell . t)
		  (python . t)
		  (ditaa . t)
		  (sql . t)
		  (http .t)
		  (plantuml . t)
		  (gnuplot . t)))
	       (setq org-agenda-files (list) ;; (list "~/Documents/agenda/main.org" 
				      ;;       "~/programs/jarman/agenda.org" 
				      ;;       "/windows-system/space/windows-agenda.org")
		     org-format-latex-options (plist-put org-format-latex-options :scale 2.3)
		     org-hide-emphasis-markers t
		     ;; list-colors-display
		     org-todo-keyword-faces '(("PLANNED"    . "dark gray")
					      ("TODO"       . "indian red")
					      ("PROCESSING" . "orange")
					      ("TOREVIEW"   . "deep sky blue")
					      ("DONE"       . "gray")
					      ("ARCHIVED"   .  "dim gray"))
		     org-log-done t
		     org-src-tab-acts-natively t
		     org-babel-clojure-backend 'cider
		     org-ditaa-jar-path "/home/serhii/.config/bin/ditaa.jar"
		     org-plantuml-jar-path "/home/serhii/.config/bin/plantuml.jar"
		     org-confirm-babel-evaluate nil
		     org-startup-with-inline-images nil
		     ;; org-startup-indented t
		     ;; org-hide-leading-stars t
		     ))
       :config 
       (add-hook 'org-mode-hook (lambda ()
				  ;; (xah-math-input-mode)
				  (require 'ob-clojure)
				  (org-bullets-mode)
				  (org-mode-pretty-symbols)
				  (prettify-symbols-mode)

				  ;; (set-face-attribute 'org-block-begin-line nil :foreground (face-background 'org-block-begin-line nil 'default))
				  ;; (set-face-attribute 'org-block-end-line nil :foreground (face-background 'org-block-end-line nil 'default))
				  )))

     ;; (use-package ox-moderncv
     ;;   :load-path "/home/serhii/.emacs.d/org-cv/"
     ;;   :init (progn
     ;; 	  (require 'ox-moderncv)
     ;; 	  (require 'ox-awesomecv)))

     ;; (defun export-cv-awesomecv ()
     ;;   (let ((file-name (buffer-file-name (current-buffer))))
     ;;     (org-export-to-file 'moderncv file-name)
     ;;     (org-latex-compile file-name)))

   #+end_src
* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :demand t
      :ensure t
      ;; :diminish dashboard-mode
      :init
      ;; (setq dashboard-banner-logo-title "* Live Long And Prosper *")
      ;; (setq dashboard-startup-banner "~/.emacs.d/Spock.png")
      (setq dashboard-startup-banner "~/.emacs.d/duck.txt")
      ;; agenda
      (setq dashboard-week-agenda nil)
      (setq dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo)
      ;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
      (setq dashboard-match-agenda-entry "-TODO=\"PLANNED\"+@Serhii")

      ;; (setq dashboard-match-agenda-entry "@Serhii")
      (setq dashboard-item-names '(("Agenda for today:" . "Agenda:")))
      ;; other
      (setq dashboard-set-heading-icons nil)
      (setq dashboard-set-file-icons nil)
      (setq dashboard-page-separator "\n\n")
      (setq dashboard-set-init-info nil)
      (setq dashboard-center-content t)
      (setq dashboard-show-shortcuts t)
      (setq dashboard-set-footer nil)
      (setq dashboard-set-navigator t)
      (setq dashboard-items '((recents  . 15)
			      (projects . 20)
			      (bookmarks . 5) 
			      (agenda . 100)))

      :config
      (dashboard-setup-startup-hook))
  #+end_src

* Visual Regular expression
  Replace regular regexp on visula regexp
  #+begin_src emacs-lisp
  (use-package visual-regexp
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace)))
  #+end_src

* EMMS
  #+begin_src emacs-lisp
    (use-package emms
	  :defer t
	  :config
	  (progn  (require 'emms-setup)
	  (emms-all)
	  (emms-default-players)
	  (setq emms-source-file-default-directory "/windows-data/Music/")
	  (setq emms-playlist-buffer-name "*Music*")
	  (setq emms-info-asynchronously t)
	  ;; (emms-add-directory-tree "~/Music/")
	  ))
  #+end_src

* java

  #+begin_src emacs-lisp
    ;; (use-package lsp-java
    ;;   :config
    ;;   (add-hook 'java-mode-hook #'lsp)
    ;;   (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))

    ;; (use-package lsp-java
    ;;   :ensure t
    ;;   :defer t
    ;;   :hook (lsp-mode . (lambda ()
    ;; 		      (let ((lsp-keymap-prefix "C-c l"))
    ;; 			(lsp-enable-which-key-integration))))
    ;;   :init
    ;;   (setq lsp-keep-workspace-alive nil
    ;; 	lsp-signature-doc-lines 5
    ;; 	lsp-idle-delay 0.5
    ;; 	lsp-prefer-capf t
    ;; 	lsp-client-packages nil)
    ;;   :config
    ;;   (add-hook 'java-mode-hook #'lsp)
    ;;   (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))
  #+end_src

* Web Mode
#+begin_src emacs-lisp
  ;; (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.tsx?$" . web-mode))

  ;; (defun setup-tide-mode ()
  ;;   (interactive)
  ;;   (tide-setup)
  ;;   (flycheck-mode +1)
  ;;   (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;   (eldoc-mode +1)
  ;;   (tide-hl-identifier-mode +1)
  ;;   (company-mode +1))

  ;; (add-hook 'typescript-mode-hook #'setup-tide-mode)

  ;; (use-package tide)

  ;; (use-package tide
  ;;   :ensure t
  ;;   :after (typescript-mode company flycheck eldoc)
  ;;   :hook ((typescript-mode . tide-setup)
  ;; 	 (typescript-mode . tide-hl-identifier-mode)
  ;; 	 (before-save . tide-format-before-save))

  ;; (use-package web-mode
  ;;   :mode (("\\.jsx$" .  web-mode)
  ;; 	 ("\\.tsx$" .  web-mode))
  ;;   :hook (web-mode . web-mode-log-hook)
  ;;   :config
  ;;   (defun web-mode-log-hook ()
  ;;     (setq web-mode-enable-auto-indentation nil)
  ;;     (when (string-equal "tsx" (file-name-extension buffer-file-name))
  ;;       (setup-tide-mode))))

#+end_src
* Cider
** config
   #+begin_src emacs-lisp
     (defun presonal-cider-mode-hook ()
       (auto-complete-mode -1)
       (company-mode 1)
       (add-to-list 'completion-category-defaults '(cider (styles basic))))

     (use-package cider
       :bind (("C-M-S-i" . cider-inspect-last-result)
	      ;; ("TAB" . company-indent-or-complete-common)
	      ("C-z C-c" . (lambda () (interactive) (cider-connect-clj '(:host "0.0.0.0" :port "39399")))))
       :init
       (setq cider-known-endpoints
	     '(("platform-repl-back" "0.0.0.0" "39399")
	       ("local-babashka" "0.0.0.0" "1667")))
       :hook (cider-mode . presonal-cider-mode-hook))
   #+end_src
* SQL Mode
  
  My first on hand sql connection manager
  #+begin_src emacs-lisp
    ;; (setq sql-connection-alist
    ;;       '((bdm_demo_dev_v2
    ;; 	 (sql-product 'mysql)
    ;; 	 (sql-server "127.0.0.1")
    ;; 	 (sql-user "root")
    ;; 	 (sql-password "root")
    ;; 	 (sql-database "bdm_demo_dev_v2")
    ;; 	 (sql-port 3406))
    ;; 	(trashpanda-team-dell
    ;; 	 (sql-product 'mysql)
    ;; 	 (sql-server "trashpanda-team.ddns.net")
    ;; 	 (sql-user "root")
    ;; 	 (sql-password "1234")
    ;; 	 (sql-database "jarman")
    ;; 	 (sql-port 3307))
    ;; 	(trashpanda-rpi
    ;; 	 (sql-product 'mysql)
    ;; 	 (sql-server "trashpanda-team.ddns.net")
    ;; 	 (sql-user "jarman")
    ;; 	 (sql-password "dupa")
    ;; 	 (sql-database "jarman")
    ;; 	 (sql-port 3306))))

    (setq sql-connection-alist
	  '((bdm-demo
	     (sql-product 'mysql)
	     (sql-server "localhost")
	     (sql-user "root")
	     (sql-password "root")
	     (sql-database "bdm_demo_dev_v2")
	     (sql-port 3406))))

    (defmacro myflet (bindings &rest body)
      "Works like the old `flet'. Does not validate form structure."
      (declare (indent defun))
      `(cl-letf ,(mapcar (lambda (binding)
			   `((symbol-function ',(car binding))
			     (lambda ,(cadr binding) ,@(cddr binding))))
			 bindings)
	 ,@body))

    (defun sql-connect-preset (name)
      "Connect to a predefined SQL connection listed in `sql-connection-alist'"
      (eval `(let ,(cdr (assoc name sql-connection-alist))
	       (myflet ((sql-get-login (&rest what)))
		 (sql-product-interactive sql-product)))))

    (defun sql-connect-trashpanda-team-dell ()
      (interactive)
      (sql-connect-preset 'trashpanda-team-dell))

    (defun sql-connect-bdm-demo ()
      (interactive)
      (sql-connect-preset 'bdm_demo))

  #+end_src
* Yafolding
  #+begin_src emacs-lisp
    ;; (defvar yafolding-mode-map
    ;;   (let ((map (make-sparse-keymap)))
    ;;     (define-key map (kbd "C-c") #'yafolding-hide-parent-element)
    ;;     (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
    ;;     (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
    ;;     map))
  #+end_src
* Reverse-im
  
  Дана конфігурація дозвоялє використовувати кириличні скорочення на емаксі.
  #+begin_src emacs-lisp
    (use-package reverse-im
      :ensure t
      :custom
      (reverse-im-input-methods '("ukrainian-computer"))
      :config
      (reverse-im-mode t))
  #+end_src
* Which Key
  #+begin_src emacs-lisp
    (which-key-mode)
  #+end_src
* Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    :bind (("C-'" . olivetti-shrink)
	   ("C-;" . olivetti-expand))
    :config
    (progn
      (add-hook 'org-mode-hook (lambda () (set-fringe-mode 0)))
      (add-hook 'text-mode-hook (lambda () (set-fringe-mode 0)))))
#+end_src
* Multiple Cursor

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
	   ("C-<" . mc/mark-previous-like-this)
	   ("C-c C-<" . mc/mark-all-like-this)
	   ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+end_src

* shoot linux app
  
  #+begin_src emacs-lisp
    ;; (defun emacs-run-launcher ()
    ;;   "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Run counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    ;;   (interactive)
    ;;   (with-selected-frame (make-frame '((name . "emacs-run-launcher")
    ;; 				     (minibuffer . only)
    ;; 				     (width . 120)
    ;; 				     (height . 11)))
    ;;     (counsel-linux-app)
    ;;     (delete-frame)))
  #+end_src

* sudo-edit
#+begin_src emacs-lisp 
  (use-package sudo-edit
    :ensure t
    :bind (("C-x x f" . sudo-edit-find-file)
	   ("C-x x e" . sudo-edit)))
#+end_src

* iresize
#+begin_src emacs-lisp
  (use-package iresize
    :bind (:map iresize-mode-map
		("k" . enlarge-window)
		("j" . shrink-window)
		("h" . shrink-window-horizontally)
		("l" . enlarge-window-horizontally))
    :config
    (global-set-key (kbd "C-c C-z") 'iresize-mode))
#+end_src

* C-z ++
#+begin_src emacs-lisp
  ;; -------------
  ;; Select Themes
  (global-set-key (kbd "C-z t d") 'customize-dracula)
  (global-set-key (kbd "C-z t c") 'customize-chyla)
  (global-set-key (kbd "C-z t f") 'customize-freshcode-light)
  (global-set-key (kbd "C-z t r") 'customize-ritchie)
  ;; ------------
  ;; Select Fonts
  (global-set-key (kbd "C-z f s") 'customize-font-SourceCodePro)
  (global-set-key (kbd "C-z f i") 'customize-font-IBMPlexMono)
  (global-set-key (kbd "C-z f f") 'customize-font-FiraCode)
  (global-set-key (kbd "C-z f h") 'customize-font-Hack)
  (global-set-key (kbd "C-z f c") 'customize-font-Monospace)
  (global-set-key (kbd "C-z f j") 'customize-font-JetBrains)
  (global-set-key (kbd "C-z f j") 'customize-font-Victor)
  ;; -----------
  ;; ShortAccess
  (global-set-key (kbd "C-z u") (lambda () (interactive) (flycheck-mode)))
  (global-set-key (kbd "C-z n") 'flycheck-next-error)
  (global-set-key (kbd "C-z p") 'flycheck-previous-error)
  (global-set-key (kbd "C-z l") 'flycheck-list-errors)
  ;; -------------------
  ;; Another Customizing
  (global-set-key (kbd "C-z C-z o") 'customize-frame-opacity)
  (global-set-key (kbd "C-z C-z h") 'highlight-something)
  (global-set-key (kbd "C-z C-z f") 'riser/make-large-ui)
  
  (global-set-key (kbd "<f5>") 'customize-dracula)
  (global-set-key (kbd "<f6>") 'customize-ritchie)

  (global-set-key (kbd "C-o") 'other-window)
  (global-set-key (kbd "C-M-o") 'other-window-back)
  (global-set-key (kbd "TAB") 'indent-for-tab-command)

  (global-set-key (kbd "C-M-;") 'shrink-window-horizontally)
  (global-set-key (kbd "C-M-'") 'enlarge-window-horizontally)
  ;; ------
  ;; Unused
  ;; (global-set-key (kbd "<C-tab>") 'next-buffer)
  ;; (global-set-key (kbd "<C-iso-lefttab>") 'previous-buffer)
  ;; (global-set-key (kbd "M-p") 'other-window)
  ;; (global-set-key (kbd "M-n") 'myprevious-window)
  ;; (global-set-key (kbd "C-x S-o") 'myprevious-window)
  ;; (global-set-key (kbd "C-c n") 'display-line-numbers-mode)
  ;; (global-set-key (kbd "C-c w") 'writeroom-mode)
  ;; (global-set-key (kbd "C-'") '(lambda () (interactive) (browse-url "www.google.com.pl")))
  ;; (global-set-key (kbd "C-\"") '(lambda () (interactive) (eww "www.google.com.pl")))
  ;; (global-set-key (kbd "C-x g") 'magit-status)
  ;; (global-set-key (kbd "<f8>") 'neotree-toggle)
  ;; (global-set-key (kbd "C-c t") 'neotree-toggle)
#+end_src

