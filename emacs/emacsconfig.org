#+TITLE: Riser Emacs Configuration
#+AUTHOR: Serhii Riznychuk
#+EMAIL: sergii.riznychuk@gmail.com
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="org.css"/>
#+STARTUP: overview

* Main Emacs Configuration
  Configuration of this block contains only non-package configuration, or only package system configuration

** always Split new buffer vertical  
   #+begin_src emacs-lisp
     ;; (setq split-height-threshold nil
     ;;       split-width-threshold 160)
   #+end_src
** Emacs bars
   Show or hide emacs UŒô component. 
   ~scroll-bar-mode~ - frame scroll bar
   ~tool-bar-mode~ - stricted emacs editiing functionality(clip/paste etc..)
   ~menu-bar-mode~ - frame utility (file,view...)
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (tool-bar-mode   -1)
     (menu-bar-mode   -1)
   #+end_src

** Modebar
   Enable line numbers in mode bars
   #+begin_src emacs-lisp
     (setq column-number-mode t)
   #+end_src

** Behavior
   Disable backup file generation
   #+begin_src emacs-lisp
     (setq custom-safe-themes t)
     (setq make-backup-files nil)
     (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
   #+end_src
   X window clipboard buffer.
   #+begin_src emacs-lisp
     (delete-selection-mode t)
     (transient-mark-mode t)
     (setq x-select-enable-clipboard t)
   #+end_src

** Text enhanches
   Display empty line
   #+begin_src emacs-lisp
     (setq-default indicate-empty-lines t)
     (when (not indicate-empty-lines)
	(toggle-indicate-empty-lines))
   #+end_src
   
** Global keymap
   Global function 
   #+begin_src emacs-lisp
     (defun myprevious-window ()
       (interactive)
       (other-window -1))
     (global-set-key (kbd "<C-tab>") 'next-buffer)
     (global-set-key (kbd "<C-iso-lefttab>") 'previous-buffer)
     (global-set-key (kbd "M-p") 'other-window)
     (global-set-key (kbd "M-n") 'myprevious-window)
     (global-set-key (kbd "C-c n") 'display-line-numbers-mode)
     (global-set-key (kbd "C-c w") 'writeroom-mode)
     (global-set-key (kbd "C-'") '(lambda () (interactive) (browse-url "www.google.com.pl")))
     ;; (global-set-key (kbd "C-\"") '(lambda () (interactive) (eww "www.google.com.pl")))
     ;; (global-set-key (kbd "C-x g") 'magit-status)
     ;; (global-set-key (kbd "<f8>") 'neotree-toggle)
     ;; (global-set-key (kbd "C-c t") 'neotree-toggle)
   #+end_src

** Autocomplete 
   #+begin_src emacs-lisp
     (use-package auto-complete-config
       :config(ac-config-default))
   #+end_src
   
** Text manipulation
   In this block you can locate functions which help me editing text or other things
*** Text moving up/down
    #+begin_src emacs-lisp
      (defun move-text-internal (arg)
	(cond
	 ((and mark-active transient-mark-mode)
	  (if (> (point) (mark))
	      (exchange-point-and-mark))
	  (let ((column (current-column))
		(text (delete-and-extract-region (point) (mark))))
	    (forward-line arg)
	    (move-to-column column t)
	    (set-mark (point))
	    (insert text)
	    (exchange-point-and-mark)
	    (setq deactivate-mark nil)))
	 (t
	  (beginning-of-line)
	  (when (or (> arg 0) (not (bobp)))
	    (forward-line)
	    (when (or (< arg 0) (not (eobp)))
	      (transpose-lines arg))
	    (forward-line -1)))))
      (defun move-text-down (arg)
	"Move region (transient-mark-mode active) or current line
	arg lines down."
	(interactive "*p")
	(move-text-internal arg))
      (defun move-text-up (arg)
	"Move region (transient-mark-mode active) or current line
	arg lines up."
	(interactive "*p")
	(move-text-internal (- arg)))
      (global-set-key (kbd "M-S-<up>") 'move-text-up)
      (global-set-key (kbd "M-S-<down>") 'move-text-down)
    #+end_src
    
** Small tips function 

   #+begin_src emacs-lisp
     (defun my/copy-buffer-file-name ()
       "Show the full path to the current file in the minibuffer."
       (interactive)
       (let ((file-name (buffer-file-name)))
	 (if file-name
	     (progn
	       (message file-name)
	       (kill-new file-name))
	   (error "Buffer not visiting a file"))))
   #+end_src

** Artist mode
   #+begin_src emacs-lisp
     (add-hook 'artist-mode-hook (lambda () (setq indent-tabs-mode nil)))
   #+end_src

* Modeline 
  #+begin_src emacs-lisp
    (mood-line-mode)
  #+end_src

* Magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :defer 3
      :bind (("C-x g" . magit-status)))
  #+end_src

* Neotree

    #+begin_src emacs-lisp
      (defun neotree-toggle-or-open-file-dir ()
	(interactive) 
	(if (neo-global--window-exists-p) 
	    (neotree-hide) 
	  ((neo-open-dir (buffer-file-name)))))

      (use-package neotree 
	:ensure t
	:defer 3
	:bind (("<f8>" . neotree-toggle)
	       ;; ("<f9>" . neotree-toggle-or-open-file-dir)
	       ("C-c t" . neotree-toggle)))

    #+end_src

* Treemacs

  #+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :defer t
      :config
      (progn
	(setq treemacs-width 50)
    
	;; The default width and height of the icons is 22 pixels. If you are
	;; using a Hi-DPI display, uncomment this to double the icon size.
	;;(treemacs-resize-icons 44)
    
	(treemacs-follow-mode t)
	(treemacs-filewatch-mode t)
	(treemacs-fringe-indicator-mode 'always))
      :bind
      (:map global-map
	    ("<f9>"   . treemacs)
	    ("<f10>"   . treemacs-bookmark)))
  #+end_src

* Ivy
  #+begin_src emacs-lisp 
  ;; (ivy-mode 1)
  ;;   (setq ivy-use-virtual-buffers t)
  ;; (setq enable-recursive-minibuffers t)
  #+end_src

* SMEX
  #+begin_src emacs-lisp 
    ;; (use-package smex
    ;;   :after package
    ;;   :ensure t
    ;;   :init
    ;;   (setq smex-save-file (expand-file-name ".smex-items" user-emacs-directory))
    ;;   (smex-initialize)
    ;;   (global-set-key (kbd "M-x") 'smex)
    ;;   (global-set-key (kbd "M-X") 'smex-major-mode-commands))
  #+end_src

* HELM

  #+begin_src emacs-lisp 
    (use-package helm 
      :ensure t
      :demand t
      :preface (require 'helm-config)
      :bind (("M-x" . helm-M-x)
	     ;; ("C-x C-f" . helm-find-files)
	     ("C-x C-f" . helm-find-files)
	     ("C-." . helm-imenu-in-all-buffers)
	     ;; ("C-x C-f" . ido-find-file)
	     ;; ("<tab>" . helm-execute-persistent-action)
	     ;; ("TAB" . helm-execute-persistent-action)
	     ;; ("C-z" . helm-select-action)
	     ("C-x b" . helm-buffers-list)
	     ;; ("C-x c o" . helm-occur) ;
	     ;; ("M-y" . helm-show-kill-ring) ;
	     ("C-x r b" . helm-filtered-bookmarks)
	     )
      :config
      (helm-mode 1))
  #+end_src

* IDO
  #+begin_src emacs-lisp
    (use-package ido
      :config
      (setq ido-enable-flex-matching t
	    ido-use-virtual-buffers t)
      (ido-mode t))
  #+end_src
  
* Lisps languages
  #+begin_src emacs-lisp
    
    (defun lisp-mode-hook ()
      "enable some plugins after init mode"
      (paredit-mode)
      (prettify-symbols-mode)
      (rainbow-delimiters-mode))
  #+end_src
** Emacs lisp
*** Emacs mode   
   #+begin_src emacs-lisp
     (use-package elisp-mode
	:defer t
	:config (add-hook 'emacs-lisp-mode-hook 'lisp-mode-hook))
   #+end_src
*** Dash library 
    #+begin_src emacs-lisp
      (use-package dash
	:no-require t
	:after dash
	:config
	(dash-enable-font-lock))
    #+end_src
** Main lisp Mode
   #+begin_src emacs-lisp
   (use-package lisp-mode
      :defer t
      :config (add-hook 'lisp-mode-hook 'lisp-mode-hook))  
   #+end_src
** Clojure
   #+begin_src emacs-lisp
     (defun clojure-lisp-pretty-symbols ()
       "Make some word or string show as pretty Unicode symbols"
       (setq prettify-symbols-alist '(;; ("lambda" . ?Œª)
				      ("fn" . ?Œª)
				      ;; ∆ë ∆î ∆í ∆¨ ∆© ∆≥ ∆¥ …Ä ‚Ñé ‚Ñ∞ ‚Ñ± ‚Ñ≤ ‚Ñ≥ ‚Ñì ‚äÇ ‚äÉ ‚ãÇ ‚ãÉ ‚à© ‚à™ ‚àà ‚àä ‚àã ‚àç ‚àò ‚á© ‚áò ‚ØÜ ‚ØÖ ü≠∂ ‚Øá ‚Øà
				      ;; Greek alphabet 
				      ;; Œë Œ±, Œí Œ≤, Œì Œ≥, Œî Œ¥, Œï Œµ, Œñ Œ∂, Œó Œ∑, Œò Œ∏, Œô Œπ, Œö Œ∫, Œõ Œª, Œú Œº, Œù ŒΩ, 
				      ;; Œû Œæ, Œü Œø, Œ† œÄ, Œ° œÅ, Œ£ œÉ/œÇ, Œ§ œÑ, Œ• œÖ, Œ¶ œÜ, Œß œá, Œ® œà, Œ© œâ
				      ;; ("->" . ?‚Üí)
				      ;; ("->>" . ?‚Ü†)
				      ;; ("=>" . ?‚áí)
				      ("defmulti" . ?∆ë)
				      ("defmethod" . ?∆í)
				      ("/=" . ?‚â†)("!=" . ?‚â†)
				      ("==" . ?‚â°)("not" . ?!)
				      ("<=" . ?‚â§)(">=" . ?‚â•)
				      ("comp" . ?œÖ)("partial" . ?œÅ)
				      ("and" . ?‚àß)("&&" . ?‚àß)
				      ("or" . ?‚à®)("||" . ?‚à®))))
     (defun personal-clojure-mode-hook ()
       (clojure-lisp-pretty-symbols)
       (lisp-mode-hook))
     (use-package clojure-mode
       :defer t
       :config (add-hook 'clojure-mode-hook 'personal-clojure-mode-hook))
   #+end_src
** Common lisp
   #+begin_src emacs-lisp
     (add-to-list 'exec-path "C:\\Program Files\\Steel Bank Common Lisp\\2.0.0\\") ;; or wherever you installed SBCL or other Lisp
     ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
     (setq inferior-lisp-program "sbcl") ;; or other Lisp
   #+end_src

* Recentf
  recentf package keep paths of your last edited files
  #+begin_src emacs-lisp
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
      (message "Aborting")))
  
  (use-package recentf
     :bind (("C-c C-b" . recentf-open-files)
            ("C-c C-r" . ido-recentf-open))
     :config (setq recentf-max-menu-items 30
                   recentf-max-saved-items 50)
     (recentf-mode 1))
  #+end_src

* Org mode
** Bullet mode
   Bullet replace header Symbol's on other markup specified in variable ~org-bullets-bullet-list~
   #+begin_src emacs-lisp
     (use-package org-bullets
	:commands org-mode
	:after org
	:config
	;; (setq org-bullets-bullet-list '("Œ±" "Œ≤" "Œ≥" "Œ¥" "Œµ" "Œ∂" "Œ∑" "Œª"))
	;; (setq org-bullets-bullet-list '("‚óè" "‚óâ" "‚óã" "‚óÜ" "‚óá"))
	;; (setq org-bullets-bullet-list '("‚óÜ"))
	(setq org-bullets-bullet-list '("‚óè"))
	;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
	(org-bullets-mode))
   #+end_src
** LaTeX conf
   #+begin_src emacs-lisp
     ;; (require 'ox-latex)
     (setq org-latex-listings t)
     (add-to-list 'org-latex-packages-alist '("" "listings"))
     (add-to-list 'org-latex-packages-alist '("" "color"))
     ;; (add-to-list 'org-latex-packages-alist '("" "minted"))

     ;; (setq org-latex-listings 'minted
     ;;       org-latex-pdf-process
     ;;       (mapcar (lambda (s) (replace-regexp-in-string "%latex " "%latex --shell-escape " s)) org-latex-pdf-process))

     ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
     ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
   #+end_src
   
** Main configuration
   #+begin_src emacs-lisp
     (defun org-mode-pretty-symbols ()
       "Make some word or string show as pretty Unicode symbols"
       (setq prettify-symbols-alist '(;; ("lambda" . ?Œª)
				      ;; ("fn" . ?Œª)
				      ;; ∆ë ∆î ∆í ∆¨ ∆© ∆≥ ∆¥ …Ä ‚Ñé ‚Ñ∞ ‚Ñ± ‚Ñ≤ ‚Ñ≥ ‚Ñì ‚äÇ ‚äÉ ‚ãÇ ‚ãÉ ‚à© ‚à™ ‚àà ‚àä ‚àã ‚àç ‚àò ‚á© ‚áò ‚ØÜ ‚ØÖ ü≠∂ ‚Øá ‚Øà
				      ;; ("->" . ?‚Üí)
				      ;; ("->>" . ?‚Ü†)
				      ;; ("=>" . ?‚áí)
				      ("#+begin_export" ?‚Øà)
				      ("#+end_export" ?‚ØÖ)
				      ("#+begin_example" ?‚ØÜ)
				      ("#+end_example" ?‚ØÖ)
				      ("#+begin_src" ?‚Øà)
				      ("#+end_src" ?‚ØÖ)
				      ("#+RESULTS:" ?=))))


     (use-package org
       :bind (("C-c l" . org-store-link)
	      ("C-c a" . org-agenda))
       :init (progn
	       (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
	       (org-babel-do-load-languages
		'org-babel-load-languages

		'((shell . t)
		  (python . t)
		  (ditaa . t)
		  (sql . t)
		  (plantuml . t)
		  (gnuplot . t)))
	       (setq org-agenda-files (list "~/Documents/agenda/main.org" 
					    "~/programs/jarman/agenda.org" 
					    "/windows-system/space/windows-agenda.org")
		     org-format-latex-options (plist-put org-format-latex-options :scale 2.3)
		     org-hide-emphasis-markers t
		     ;; list-colors-display
		     org-todo-keyword-faces '(("PLANNED"    . "dark gray")
					      ("TODO"       . "indian red")
					      ("PROCESSING" . "orange")
					      ("TOREVIEW"   . "deep sky blue")
					      ("DONE"       . "gray")
					      ("ARCHIVED"   .  "dim gray"))
		     org-log-done t
		     org-src-tab-acts-natively t
		     org-babel-clojure-backend 'cider
		     org-ditaa-jar-path "/home/serhii/.config/bin/ditaa.jar"
		     org-plantuml-jar-path "/home/serhii/.config/bin/plantuml.jar"
		     org-confirm-babel-evaluate nil
		     org-startup-with-inline-images nil
		     ;; org-startup-indented t
		     ;; org-hide-leading-stars t
		     ))
       :config 
       (add-hook 'org-mode-hook (lambda ()
				  ;; (xah-math-input-mode)
				  (require 'ob-clojure)
				  (org-bullets-mode)
				  (org-mode-pretty-symbols)
				  (prettify-symbols-mode)
				  ;; (set-face-attribute 'org-block-begin-line nil :foreground (face-background 'org-block-begin-line nil 'default))
				  ;; (set-face-attribute 'org-block-end-line nil :foreground (face-background 'org-block-end-line nil 'default))
				  )))
   #+end_src
* Dashboard
  #+begin_src emacs-lisp
    (use-package dashboard
      :demand t
      :ensure t
      ;; :diminish dashboard-mode
      :init
      ;; (setq dashboard-banner-logo-title "* Live Long And Prosper *")
      ;; (setq dashboard-startup-banner "~/.emacs.d/Spock.png")
      (setq dashboard-startup-banner "~/.emacs.d/duck.txt")
      ;; agenda
      (setq dashboard-week-agenda nil)
      (setq dashboard-filter-agenda-entry 'dashboard-filter-agenda-by-todo)
      ;; (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
      (setq dashboard-match-agenda-entry "-TODO=\"PLANNED\"+@Serhii")

      ;; (setq dashboard-match-agenda-entry "@Serhii")
      (setq dashboard-item-names '(("Agenda for today:" . "Agenda:")))
      ;; other
      (setq dashboard-set-heading-icons nil)
      (setq dashboard-set-file-icons nil)
      (setq dashboard-page-separator "\n\n")
      (setq dashboard-set-init-info nil)
      (setq dashboard-center-content t)
      (setq dashboard-show-shortcuts t)
      (setq dashboard-set-footer nil)
      (setq dashboard-set-navigator t)
      (setq dashboard-items '((recents  . 15)
			      (projects . 20)
			      (bookmarks . 5) 
			      (agenda . 100)))

      :config
      (dashboard-setup-startup-hook))
  #+end_src

* Visual Regular expression
  Replace regular regexp on visula regexp
  #+begin_src emacs-lisp
  (use-package visual-regexp
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace)))
  #+end_src

* EMMS
  #+begin_src emacs-lisp
    (use-package emms
	  :defer t
	  :config
	  (progn  (require 'emms-setup)
	  (emms-all)
	  (emms-default-players)
	  (setq emms-source-file-default-directory "/windows-data/Music/")
	  (setq emms-playlist-buffer-name "*Music*")
	  (setq emms-info-asynchronously t)
	  ;; (emms-add-directory-tree "~/Music/")
	  ))
  #+end_src

* java

  #+begin_src emacs-lisp
    ;; (use-package lsp-java
    ;;   :config
    ;;   (add-hook 'java-mode-hook #'lsp))
  #+end_src
* Projectile with helm
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
		  ;; ("s-p" . projectile-command-map)
		  ("C-c p" . projectile-command-map)))

    (use-package helm-projectile
      :ensure t
      :after (helm projectile)
      :init
      (helm-projectile-on))
  #+end_src
* Firm code 
  Code
** Freshcode
   #+begin_src emacs-lisp
     (setq cider-known-endpoints
	   '(("platform-repl-back" "0.0.0.0" "3012")
	     ("babashka" "0.0.0.0" "1667")
	     ("platform-repl-front" "0.0.0.0" "8333")))

     ;; (setq cider-fcode-figwheel-nrepl
     ;;       )

     ;; (defun cider-fcode ()
     ;;   (interactive)
     ;;   (save-some-buffers)
     ;;   (with-current-buffer (cider-current-repl-buffer)
     ;;     (goto-char (point-max))
     ;;     (insert cider-fcode-figwheel-nrepl)
     ;;     (cider-connect-cljs)))

     ;; (defun cider-eval-expression-at-point-in-repl ()
     ;;   "Sends the preceding expression to the Cider REPL."
     ;;   (interactive)
     ;;   (let ((form "(+ 1 2)"))
     ;;     ;; Strip excess whitespace
     ;;     (while (string-match "\`\s+\|\n+\'" form)
     ;;       (setq form (replace-match "" t t form)))
     ;;     (set-buffer (cider-find-or-create-repl-buffer))
     ;;     (goto-char (point-max))
     ;;     (insert form)
     ;;     (cider-repl-return)))
     ;; (cider-switch-to-repl-buffer)

     ;; (setq cider-jack-in-dev-profile '("cider" "dev"))
     ;; (defun cider-jack-in-with-profile ()
     ;;   (interactive)
     ;;   (letrec ((profile (read-string (message "Enter profile name(%s): " (string-join cider-jack-in-dev-profile ","))))
     ;; 	   (lein-params (message "with-profile %s repl :headless" (if (seq-empty-p profile) (string-join cider-jack-in-dev-profile ",") profile))))
     ;;     (message "lein-params set to: %s" lein-params)
     ;;     (set-variable 'cider-lein-parameters lein-params)
     ;;     ;; ;; just a empty parameter
     ;;     (cider-jack-in '())
     ;;     (cider-switch-to-repl-buffer)
     ;;     (cider-insert-in-repl
     ;;      "(do (use 'figwheel-sidecar.repl-api)
     ;; 	   (start-figwheel!)
     ;; 	   (cljs-repl))" t)

     ;;     ;; (with-current-buffer (cider-current-repl-buffer)
     ;;     ;;   (goto-char (point-max))
     ;;     ;;   (insert "(do (use 'figwheel-sidecar.repl-api)
     ;;     ;; 	   (start-figwheel!)
     ;;     ;; 	   (cljs-repl))")
     ;;     ;;   ;; (cider-connect-cljs)
     ;;     ;;   )
     ;;     ))


     ;; (progn  (cider-switch-to-repl-buffer)
     ;; 	(cider-insert-in-repl
     ;; 	 "(do (use 'figwheel-sidecar.repl-api)
     ;; 	   (start-figwheel!)
     ;; 	   (cljs-repl))" t))

   #+end_src
* SQL Mode
  
  My first on hand sql connection manager
  #+begin_src emacs-lisp
    (setq sql-connection-alist
	  '((bdm_demo_dev_v2
	     (sql-product 'mysql)
	     (sql-server "127.0.0.1")
	     (sql-user "root")
	     (sql-password "root")
	     (sql-database "bdm_demo_dev_v2")
	     (sql-port 3406))
	    (trashpanda-team-dell
	     (sql-product 'mysql)
	     (sql-server "trashpanda-team.ddns.net")
	     (sql-user "root")
	     (sql-password "1234")
	     (sql-database "jarman")
	     (sql-port 3307))
	    (trashpanda-rpi
	     (sql-product 'mysql)
	     (sql-server "trashpanda-team.ddns.net")
	     (sql-user "jarman")
	     (sql-password "dupa")
	     (sql-database "jarman")
	     (sql-port 3306))))

    (defmacro myflet (bindings &rest body)
      "Works like the old `flet'. Does not validate form structure."
      (declare (indent defun))
      `(cl-letf ,(mapcar (lambda (binding)
			   `((symbol-function ',(car binding))
			     (lambda ,(cadr binding) ,@(cddr binding))))
			 bindings)
	 ,@body))

    (defun sql-connect-preset (name)
      "Connect to a predefined SQL connection listed in `sql-connection-alist'"
      (eval `(let ,(cdr (assoc name sql-connection-alist))
	       (myflet ((sql-get-login (&rest what)))
		 (sql-product-interactive sql-product)))))

    (defun sql-connect-trashpanda-team-dell ()
      (interactive)
      (sql-connect-preset 'trashpanda-team-dell))

    (defun sql-connect-bdm-demo ()
      (interactive)
      (sql-connect-preset 'bdm_demo_dev_v2))
  #+end_src
* Yafolding
  #+begin_src emacs-lisp
    ;; (defvar yafolding-mode-map
    ;;   (let ((map (make-sparse-keymap)))
    ;;     (define-key map (kbd "C-c") #'yafolding-hide-parent-element)
    ;;     (define-key map (kbd "<C-M-return>") #'yafolding-toggle-all)
    ;;     (define-key map (kbd "<C-return>") #'yafolding-toggle-element)
    ;;     map))
  #+end_src
* Reverse-im
  
  –î–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–æ–∑–≤–æ—è–ª—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–∏—Ä–∏–ª–∏—á–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –Ω–∞ –µ–º–∞–∫—Å—ñ.
  #+begin_src emacs-lisp
    (use-package reverse-im
      :ensure t
      :custom
      (reverse-im-input-methods '("ukrainian-computer"))
      :config
      (reverse-im-mode t))
  #+end_src

* Which Key 
  #+begin_src emacs-lisp
    (which-key-mode)
  #+end_src
* shoot linux app
  
  # +begin_src emacs-lisp
    ;; (defun emacs-run-launcher ()
    ;;   "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Run counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    ;;   (interactive)
    ;;   (with-selected-frame (make-frame '((name . "emacs-run-launcher")
    ;; 				     (minibuffer . only)
    ;; 				     (width . 120)
    ;; 				     (height . 11)))
    ;;     (counsel-linux-app)
    ;;     (delete-frame)))
  # +end_src


